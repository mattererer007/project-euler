import math

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1+2+3+4+5+6+7 = 28. 

The first ten terms would be: 1,3,6,10,15,21,28,36,45,55,....

What is the value of the first triangle number to have over five hundred divisors?

"""

## Safe to assume that this number would have to be divisible by both even and odd numbers (i.e., 2,3)
# This is admittedly a brute of O(n^2) with trying to reduce computing by iterating only up to the square root
class Solution:
    def traingleDivisors(self, divisors: int) -> int:

        n = 1

        while True:
            triangle_number = self.returnTriangleNumber(n)
            count = 0

            for i in range(1, int(math.sqrt(triangle_number)) + 1):
                if triangle_number % i == 0: # check if triangle number divisible by i (integer)
                    if i == triangle_number // i: # check if square root i * i (only count once)
                        count += 1
                    else:
                        count += 2 # count both i and its divisor i.e, 20 // 2  = 10 but with square root of 20 ~= 5, need to account for 10 manually

            if count > divisors: # return once # of divisors reached
                return triangle_number

            n += 1

    # a triangle number can be derived from given formula
    def returnTriangleNumber(self, n: int) -> int:

        return (n*(n+1))//2
    


if __name__ == "__main__":
    solution = Solution()

    factor_count = 500
    
    print(solution.traingleDivisors(factor_count))